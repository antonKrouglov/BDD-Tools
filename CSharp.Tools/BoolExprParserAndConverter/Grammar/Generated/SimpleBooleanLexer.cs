//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Projects\BDD\BDD-Tools.scratch\CS\BoolExprParserAndConverter\Grammar\SimpleBoolean.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BddTools.Grammar.Generated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class SimpleBooleanLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ITE=1, COMMA=2, AND=3, OR=4, NOT=5, TRUE=6, FALSE=7, LPAREN=8, RPAREN=9, 
		IDENTIFIER=10, WS=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ITE", "COMMA", "AND", "OR", "NOT", "TRUE", "FALSE", "LPAREN", "RPAREN", 
		"IDENTIFIER", "WS"
	};


	public SimpleBooleanLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpleBooleanLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "','", "'&'", "'|'", "'!'", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ITE", "COMMA", "AND", "OR", "NOT", "TRUE", "FALSE", "LPAREN", "RPAREN", 
		"IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleBoolean.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleBooleanLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,64,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
		1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,
		8,1,9,1,9,5,9,53,8,9,10,9,12,9,56,9,9,1,10,4,10,59,8,10,11,10,12,10,60,
		1,10,1,10,0,0,11,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,1,
		0,12,2,0,73,73,105,105,2,0,84,84,116,116,2,0,69,69,101,101,2,0,82,82,114,
		114,2,0,85,85,117,117,2,0,70,70,102,102,2,0,65,65,97,97,2,0,76,76,108,
		108,2,0,83,83,115,115,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
		122,3,0,9,10,12,13,32,32,65,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
		0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
		0,19,1,0,0,0,0,21,1,0,0,0,1,23,1,0,0,0,3,27,1,0,0,0,5,29,1,0,0,0,7,31,
		1,0,0,0,9,33,1,0,0,0,11,35,1,0,0,0,13,40,1,0,0,0,15,46,1,0,0,0,17,48,1,
		0,0,0,19,50,1,0,0,0,21,58,1,0,0,0,23,24,7,0,0,0,24,25,7,1,0,0,25,26,7,
		2,0,0,26,2,1,0,0,0,27,28,5,44,0,0,28,4,1,0,0,0,29,30,5,38,0,0,30,6,1,0,
		0,0,31,32,5,124,0,0,32,8,1,0,0,0,33,34,5,33,0,0,34,10,1,0,0,0,35,36,7,
		1,0,0,36,37,7,3,0,0,37,38,7,4,0,0,38,39,7,2,0,0,39,12,1,0,0,0,40,41,7,
		5,0,0,41,42,7,6,0,0,42,43,7,7,0,0,43,44,7,8,0,0,44,45,7,2,0,0,45,14,1,
		0,0,0,46,47,5,40,0,0,47,16,1,0,0,0,48,49,5,41,0,0,49,18,1,0,0,0,50,54,
		7,9,0,0,51,53,7,10,0,0,52,51,1,0,0,0,53,56,1,0,0,0,54,52,1,0,0,0,54,55,
		1,0,0,0,55,20,1,0,0,0,56,54,1,0,0,0,57,59,7,11,0,0,58,57,1,0,0,0,59,60,
		1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,62,1,0,0,0,62,63,6,10,0,0,63,22,
		1,0,0,0,3,0,54,60,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BddTools.Grammar.Generated
