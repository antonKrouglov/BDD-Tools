//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Projects\BDD\BDD-Tools\CSharp.Tools\BoolExprParserAndConverter\Grammar\iteForBdd.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Parser.Ite {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class iteForBddParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ITE=1, COMMA=2, TRUE=3, FALSE=4, LPAREN=5, RPAREN=6, IDENTIFIER=7, WS=8;
	public const int
		RULE_parse = 0, RULE_expression = 1, RULE_boolLiteral = 2;
	public static readonly string[] ruleNames = {
		"parse", "expression", "boolLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "','", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ITE", "COMMA", "TRUE", "FALSE", "LPAREN", "RPAREN", "IDENTIFIER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "iteForBdd.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static iteForBddParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public iteForBddParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public iteForBddParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(iteForBddParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IiteForBddListener typedListener = listener as IiteForBddListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IiteForBddListener typedListener = listener as IiteForBddListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiteForBddVisitor<TResult> typedVisitor = visitor as IiteForBddVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6;
			expression();
			State = 7;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(iteForBddParser.IDENTIFIER, 0); }
		public VariableExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IiteForBddListener typedListener = listener as IiteForBddListener;
			if (typedListener != null) typedListener.EnterVariableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IiteForBddListener typedListener = listener as IiteForBddListener;
			if (typedListener != null) typedListener.ExitVariableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiteForBddVisitor<TResult> typedVisitor = visitor as IiteForBddVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolLiteralExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		public BoolLiteralExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IiteForBddListener typedListener = listener as IiteForBddListener;
			if (typedListener != null) typedListener.EnterBoolLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IiteForBddListener typedListener = listener as IiteForBddListener;
			if (typedListener != null) typedListener.ExitBoolLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiteForBddVisitor<TResult> typedVisitor = visitor as IiteForBddVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IteExprContext : ExpressionContext {
		public IToken op;
		public IToken ifcond;
		public ExpressionContext thenexpr;
		public ExpressionContext elseexpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(iteForBddParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(iteForBddParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(iteForBddParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(iteForBddParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITE() { return GetToken(iteForBddParser.ITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(iteForBddParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IteExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IiteForBddListener typedListener = listener as IiteForBddListener;
			if (typedListener != null) typedListener.EnterIteExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IiteForBddListener typedListener = listener as IiteForBddListener;
			if (typedListener != null) typedListener.ExitIteExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiteForBddVisitor<TResult> typedVisitor = visitor as IiteForBddVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			State = 20;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ITE:
				_localctx = new IteExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9;
				((IteExprContext)_localctx).op = Match(ITE);
				State = 10;
				Match(LPAREN);
				State = 11;
				((IteExprContext)_localctx).ifcond = Match(IDENTIFIER);
				State = 12;
				Match(COMMA);
				State = 13;
				((IteExprContext)_localctx).thenexpr = expression();
				State = 14;
				Match(COMMA);
				State = 15;
				((IteExprContext)_localctx).elseexpr = expression();
				State = 16;
				Match(RPAREN);
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new BoolLiteralExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 18;
				boolLiteral();
				}
				break;
			case IDENTIFIER:
				_localctx = new VariableExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 19;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(iteForBddParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(iteForBddParser.FALSE, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IiteForBddListener typedListener = listener as IiteForBddListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IiteForBddListener typedListener = listener as IiteForBddListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiteForBddVisitor<TResult> typedVisitor = visitor as IiteForBddVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 4, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,8,25,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,3,1,21,8,1,1,2,1,2,1,2,0,0,3,0,2,4,0,1,1,0,3,4,23,0,
		6,1,0,0,0,2,20,1,0,0,0,4,22,1,0,0,0,6,7,3,2,1,0,7,8,5,0,0,1,8,1,1,0,0,
		0,9,10,5,1,0,0,10,11,5,5,0,0,11,12,5,7,0,0,12,13,5,2,0,0,13,14,3,2,1,0,
		14,15,5,2,0,0,15,16,3,2,1,0,16,17,5,6,0,0,17,21,1,0,0,0,18,21,3,4,2,0,
		19,21,5,7,0,0,20,9,1,0,0,0,20,18,1,0,0,0,20,19,1,0,0,0,21,3,1,0,0,0,22,
		23,7,0,0,0,23,5,1,0,0,0,1,20
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Parser.Ite
