//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Projects\BDD\Antlr\BddTools\Grammar\SimpleBoolean.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Parser.Ite {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISimpleBooleanListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class SimpleBooleanBaseListener : ISimpleBooleanListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleBooleanParser.parse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParse([NotNull] SimpleBooleanParser.ParseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleBooleanParser.parse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParse([NotNull] SimpleBooleanParser.ParseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>variableExpr</c>
	/// labeled alternative in <see cref="SimpleBooleanParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableExpr([NotNull] SimpleBooleanParser.VariableExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>variableExpr</c>
	/// labeled alternative in <see cref="SimpleBooleanParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableExpr([NotNull] SimpleBooleanParser.VariableExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="SimpleBooleanParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExpr([NotNull] SimpleBooleanParser.NotExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="SimpleBooleanParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExpr([NotNull] SimpleBooleanParser.NotExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryExpr</c>
	/// labeled alternative in <see cref="SimpleBooleanParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryExpr([NotNull] SimpleBooleanParser.BinaryExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryExpr</c>
	/// labeled alternative in <see cref="SimpleBooleanParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryExpr([NotNull] SimpleBooleanParser.BinaryExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>boolLiteralExpr</c>
	/// labeled alternative in <see cref="SimpleBooleanParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolLiteralExpr([NotNull] SimpleBooleanParser.BoolLiteralExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>boolLiteralExpr</c>
	/// labeled alternative in <see cref="SimpleBooleanParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolLiteralExpr([NotNull] SimpleBooleanParser.BoolLiteralExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenExpr</c>
	/// labeled alternative in <see cref="SimpleBooleanParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenExpr([NotNull] SimpleBooleanParser.ParenExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenExpr</c>
	/// labeled alternative in <see cref="SimpleBooleanParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenExpr([NotNull] SimpleBooleanParser.ParenExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>iteExpr</c>
	/// labeled alternative in <see cref="SimpleBooleanParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIteExpr([NotNull] SimpleBooleanParser.IteExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>iteExpr</c>
	/// labeled alternative in <see cref="SimpleBooleanParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIteExpr([NotNull] SimpleBooleanParser.IteExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleBooleanParser.binaryOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryOp([NotNull] SimpleBooleanParser.BinaryOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleBooleanParser.binaryOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryOp([NotNull] SimpleBooleanParser.BinaryOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleBooleanParser.boolLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolLiteral([NotNull] SimpleBooleanParser.BoolLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleBooleanParser.boolLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolLiteral([NotNull] SimpleBooleanParser.BoolLiteralContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Parser.Ite
